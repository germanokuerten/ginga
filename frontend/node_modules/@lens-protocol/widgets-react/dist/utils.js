var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Size, ThemeColor } from './types';
export var backgroundColorMap = {
    "default": ThemeColor.darkGray,
    light: ThemeColor.lightGray,
    dark: ThemeColor.lightBlack,
    green: ThemeColor.green,
    mint: ThemeColor.mint,
    peach: ThemeColor.peach,
    lavender: ThemeColor.lavender,
    blonde: ThemeColor.blonde
};
export var foregroundColorMap = {
    "default": ThemeColor.lightGray,
    light: ThemeColor.darkGray,
    dark: ThemeColor.lightGray,
    green: ThemeColor.mint,
    mint: ThemeColor.darkGray,
    peach: ThemeColor.darkGray,
    lavender: ThemeColor.darkGray,
    blonde: ThemeColor.darkGray
};
var sizeMap = {
    small: '12px',
    medium: '16px',
    large: '18px'
};
export var dimensionsMap = {
    small: { width: 25.5, height: 16.5 },
    medium: { width: 34, height: 22 },
    large: { width: 51, height: 33 }
};
export function getContainerStyle(theme, size) {
    var appendedStyles = {
        backgroundColor: backgroundColorMap[theme],
        padding: '6px 13px 6px 9px'
    };
    if (size === Size.large) {
        appendedStyles.padding = '8px 18px 8px 13px';
    }
    if (size === Size.small) {
        appendedStyles.padding = '6px 13px 6px 9px';
    }
    return __assign(__assign({}, styles.buttonContainer), appendedStyles);
}
export function getTextStyle(theme, size) {
    var appendedStyles = {
        color: foregroundColorMap[theme],
        fontSize: sizeMap[size]
    };
    return __assign(__assign({}, styles.text), appendedStyles);
}
export function configureIpfsUrl(uri) {
    if (uri.startsWith('ipfs://')) {
        var result = uri.substring(7, uri.length);
        var modifiedUrl = "https://lens.infura-ipfs.io/ipfs/".concat(result);
        return modifiedUrl;
    }
    else if (uri.startsWith('https://')) {
        return uri;
    }
    else {
        return null;
    }
}
export function returnIpfsPathOrUrl(uri) {
    if (uri.startsWith('ipfs://')) {
        var result = uri.substring(7, uri.length);
        var modifiedUrl = "https://lens.infura-ipfs.io/ipfs/".concat(result);
        return modifiedUrl;
    }
    else {
        return uri;
    }
}
export function formatProfilePictures(profiles) {
    return profiles.map(function (profile) {
        var picture = profile.picture, coverPicture = profile.coverPicture;
        if (picture && picture.__typename === 'MediaSet') {
            if (picture.original) {
                picture.original.url = returnIpfsPathOrUrl(picture.original.url);
            }
        }
        if (coverPicture && coverPicture.__typename === 'MediaSet') {
            if (coverPicture.original.url) {
                coverPicture.original.url = returnIpfsPathOrUrl(coverPicture.original.url);
            }
        }
        return profile;
    });
}
export function formatProfilePicture(profile) {
    profile = JSON.parse(JSON.stringify(profile));
    var picture = profile.picture, coverPicture = profile.coverPicture;
    if (picture && picture.__typename === 'MediaSet') {
        if (picture.original) {
            picture.original.url = returnIpfsPathOrUrl(picture.original.url);
        }
    }
    if (coverPicture && coverPicture.__typename === 'MediaSet') {
        if (coverPicture.original.url) {
            coverPicture.original.url = returnIpfsPathOrUrl(coverPicture.original.url);
        }
    }
    return profile;
}
export function configureMirrorAndIpfsUrl(items) {
    return items.map(function (item) {
        if (item.profileSet)
            return item;
        var profile = item.profile;
        if (item.__typename === 'Mirror') {
            if (item.mirrorOf) {
                item.originalProfile = profile;
                item.stats = item.mirrorOf.stats;
                profile = item.mirrorOf.profile;
            }
        }
        if (profile.picture && profile.picture.__typename === 'MediaSet' && profile.picture.original) {
            var url = configureIpfsUrl(profile.picture.original.url);
            if (url) {
                profile.picture.original.url = url;
            }
            else {
                profile.missingAvatar = true;
            }
        }
        else {
            profile.missingAvatar = true;
        }
        item.profile = profile;
        item.profileSet = true;
        return item;
    });
}
export var systemFonts = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";';
export function getSubstring(string, length) {
    if (length === void 0) { length = 130; }
    if (string.length <= length) {
        return string;
    }
    else {
        return "".concat(string.substring(0, length), " ...");
    }
}
export function formatHandleColors(text) {
    var color = ThemeColor.lightGreen;
    text = text.replaceAll('.lens', '');
    text = text.replace(/(https\S+)/g, "<span style=\"color: ".concat(color, ";\">$1</span>"));
    return text.replace(/@(\w+)/g, "<span style=\"color: ".concat(color, ";\">@$1</span>"));
}
export function formatHandleList(handles) {
    handles = handles.join(', ');
    handles = handles.replaceAll('.lens', '');
    return handles;
}
var styles = {
    buttonContainer: {
        outline: 'none',
        border: 'none',
        borderRadius: 50,
        display: 'flex',
        alignItems: 'center',
        cursor: 'pointer'
    },
    text: {
        margin: '0px 0px 0px 6px',
        padding: 0,
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'
    }
};
//# sourceMappingURL=utils.js.map