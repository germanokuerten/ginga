var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Theme, Size } from './types';
import { getContainerStyle, getTextStyle } from './utils';
import { ethers } from 'ethers';
import { client } from './graphql/client';
import { challenge, authenticate, profileByAddress } from './graphql';
import LensIcon from './LensIcon';
export function SignInWithLens(_a) {
    var provider = _a.provider, _b = _a.theme, theme = _b === void 0 ? Theme["default"] : _b, _c = _a.size, size = _c === void 0 ? Size.medium : _c, _d = _a.title, title = _d === void 0 ? 'Sign in With Lens' : _d, onSignIn = _a.onSignIn;
    var _e = __read(useState(null), 2), authTokens = _e[0], setAuthTokens = _e[1];
    var _f = __read(useState(false), 2), authenticating = _f[0], setAuthenticating = _f[1];
    var _g = __read(useState(), 2), profile = _g[0], setProfile = _g[1];
    function authenticateWithLens() {
        return __awaiter(this, void 0, void 0, function () {
            var address, challengeInfo, signer, signature, authData, tokens, profileData, defaultProfile, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 8, , 9]);
                        if (authenticating)
                            return [2];
                        if (authTokens && profile) {
                            onSignIn(authTokens, profile);
                            return [2];
                        }
                        setAuthenticating(true);
                        if (!(!provider && window.ethereum)) return [3, 2];
                        return [4, getProvider()];
                    case 1:
                        provider = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!provider) {
                            console.log('no provider configured...');
                            setAuthenticating(false);
                            return [2];
                        }
                        return [4, getAddress()];
                    case 3:
                        address = _a.sent();
                        return [4, client.query({
                                query: challenge,
                                variables: { address: address }
                            })];
                    case 4:
                        challengeInfo = _a.sent();
                        signer = provider.getSigner();
                        return [4, signer.signMessage(challengeInfo.data.challenge.text)];
                    case 5:
                        signature = _a.sent();
                        return [4, client.mutate({
                                mutation: authenticate,
                                variables: {
                                    address: address,
                                    signature: signature
                                }
                            })];
                    case 6:
                        authData = _a.sent();
                        tokens = authData.data.authenticate;
                        return [4, client.query({
                                query: profileByAddress,
                                variables: {
                                    address: address,
                                    signature: signature
                                }
                            })];
                    case 7:
                        profileData = _a.sent();
                        defaultProfile = profileData.data.defaultProfile;
                        setProfile(defaultProfile);
                        setAuthTokens(tokens);
                        onSignIn(tokens, defaultProfile);
                        setAuthenticating(false);
                        return [3, 9];
                    case 8:
                        err_1 = _a.sent();
                        setAuthenticating(false);
                        console.log('error signing in with Lens...', err_1);
                        return [3, 9];
                    case 9: return [2];
                }
            });
        });
    }
    function getAddress() {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, window.ethereum.request({ method: 'eth_requestAccounts' })];
                    case 1:
                        response = _a.sent();
                        return [2, response[0]];
                }
            });
        });
    }
    function getProvider() {
        return __awaiter(this, void 0, void 0, function () {
            var err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, window.ethereum.request({
                                method: 'eth_requestAccounts'
                            })];
                    case 1:
                        _a.sent();
                        return [2, new ethers.providers.Web3Provider(window.ethereum)];
                    case 2:
                        err_2 = _a.sent();
                        console.log('error connecting wallet and signing in...', err_2);
                        return [3, 3];
                    case 3: return [2];
                }
            });
        });
    }
    return (_jsxs("button", __assign({ onClick: authenticateWithLens, style: getContainerStyle(theme, size) }, { children: [_jsx(LensIcon, { theme: theme, size: size }), _jsx("p", __assign({ style: getTextStyle(theme, size) }, { children: title }))] })));
}
//# sourceMappingURL=SignInWithLens.js.map