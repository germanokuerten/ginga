export declare enum Theme {
    default = "default",
    light = "light",
    dark = "dark",
    mint = "mint",
    green = "green",
    peach = "peach",
    lavender = "lavender",
    blonde = "blonde"
}
export declare enum ThemeColor {
    lightGray = "#dcdcdc",
    darkGray = "#464646",
    lightBlack = "#1C1D1C",
    lightGreen = "#75B680",
    mint = "#bce0c7",
    green = "#364239",
    peach = "#f5d4d2",
    lavender = "#dbccf3",
    blonde = "#ffebB8",
    white = "white",
    black = "black"
}
export declare enum Size {
    small = "small",
    medium = "medium",
    large = "large"
}
export type Tokens = {
    accessToken: string;
    refreshToken: string;
};
export type Maybe<T> = T | null;
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    BlockchainData: any;
    BroadcastId: any;
    ChainId: any;
    CollectModuleData: any;
    ContentEncryptionKey: any;
    ContractAddress: any;
    CreateHandle: any;
    Cursor: any;
    DateTime: any;
    EncryptedValueScalar: any;
    Ens: any;
    EthereumAddress: any;
    FollowModuleData: any;
    Handle: any;
    HandleClaimIdScalar: any;
    IfpsCid: any;
    InternalPublicationId: any;
    Jwt: any;
    LimitScalar: any;
    Locale: any;
    Markdown: any;
    MimeType: any;
    NftOwnershipId: any;
    Nonce: any;
    NotificationId: any;
    ProfileId: any;
    ProfileInterest: any;
    ProxyActionId: any;
    PublicationId: any;
    PublicationTag: any;
    PublicationUrl: any;
    ReactionId: any;
    ReferenceModuleData: any;
    Search: any;
    Signature: any;
    Sources: any;
    TimestampScalar: any;
    TokenId: any;
    TxHash: any;
    TxId: any;
    UnixTimestamp: any;
    Url: any;
    Void: any;
};
export type ProfileHandle = {
    handle: Scalars['Handle'];
    picture?: string;
};
export type Profile = {
    __typename?: 'Profile';
    attributes?: Maybe<Array<Attribute>>;
    bio?: Maybe<Scalars['String']>;
    coverPicture?: Maybe<ProfileMedia>;
    dispatcher?: Maybe<Dispatcher>;
    followModule?: Maybe<FollowModule>;
    followNftAddress?: Maybe<Scalars['ContractAddress']>;
    handle: Scalars['Handle'];
    id: Scalars['ProfileId'];
    interests?: Maybe<Array<Scalars['ProfileInterest']>>;
    isDefault: Scalars['Boolean'];
    isFollowedByMe: Scalars['Boolean'];
    isFollowing: Scalars['Boolean'];
    metadata?: Maybe<Scalars['Url']>;
    name?: Maybe<Scalars['String']>;
    onChainIdentity: OnChainIdentity;
    ownedBy: Scalars['EthereumAddress'];
    picture?: Maybe<ProfileMedia>;
    stats: ProfileStats;
};
export type ProfileStats = {
    __typename?: 'ProfileStats';
    commentsTotal: Scalars['Int'];
    id: Scalars['ProfileId'];
    mirrorsTotal: Scalars['Int'];
    postsTotal: Scalars['Int'];
    publicationsTotal: Scalars['Int'];
    totalCollects: Scalars['Int'];
    totalComments: Scalars['Int'];
    totalFollowers: Scalars['Int'];
    totalFollowing: Scalars['Int'];
    totalMirrors: Scalars['Int'];
    totalPosts: Scalars['Int'];
    totalPublications: Scalars['Int'];
};
export type ProfileMedia = MediaSet | NftImage;
export type FollowModule = FeeFollowModuleSettings | ProfileFollowModuleSettings | RevertFollowModuleSettings | UnknownFollowModuleSettings;
export type Dispatcher = {
    __typename?: 'Dispatcher';
    address: Scalars['EthereumAddress'];
    canUseRelay: Scalars['Boolean'];
};
export declare enum FollowModules {
    FeeFollowModule = "FeeFollowModule",
    ProfileFollowModule = "ProfileFollowModule",
    RevertFollowModule = "RevertFollowModule",
    UnknownFollowModule = "UnknownFollowModule"
}
export type FeeFollowModuleSettings = {
    __typename?: 'FeeFollowModuleSettings';
    amount: ModuleFeeAmount;
    contractAddress: Scalars['ContractAddress'];
    recipient: Scalars['EthereumAddress'];
    type: FollowModules;
};
export type ProfileFollowModuleSettings = {
    __typename?: 'ProfileFollowModuleSettings';
    contractAddress: Scalars['ContractAddress'];
    type: FollowModules;
};
export type UnknownFollowModuleSettings = {
    __typename?: 'UnknownFollowModuleSettings';
    contractAddress: Scalars['ContractAddress'];
    followModuleReturnData: Scalars['FollowModuleData'];
    type: FollowModules;
};
export type RevertFollowModuleSettings = {
    __typename?: 'RevertFollowModuleSettings';
    contractAddress: Scalars['ContractAddress'];
    type: FollowModules;
};
export type NftImage = {
    __typename?: 'NftImage';
    chainId: Scalars['Int'];
    contractAddress: Scalars['ContractAddress'];
    tokenId: Scalars['String'];
    uri: Scalars['Url'];
    verified: Scalars['Boolean'];
};
export type Media = {
    __typename?: 'Media';
    altTag?: Maybe<Scalars['String']>;
    cover?: Maybe<Scalars['Url']>;
    height?: Maybe<Scalars['Int']>;
    mimeType?: Maybe<Scalars['MimeType']>;
    size?: Maybe<Scalars['Int']>;
    url: Scalars['Url'];
    width?: Maybe<Scalars['Int']>;
};
export type MediaSet = {
    __typename?: 'MediaSet';
    medium?: Maybe<Media>;
    original: Media;
    small?: Maybe<Media>;
};
export type Attribute = {
    __typename?: 'Attribute';
    displayType?: Maybe<Scalars['String']>;
    key: Scalars['String'];
    traitType?: Maybe<Scalars['String']>;
    value: Scalars['String'];
};
export type EnsOnChainIdentity = {
    __typename?: 'EnsOnChainIdentity';
    name?: Maybe<Scalars['Ens']>;
};
export type SybilDotOrgIdentity = {
    __typename?: 'SybilDotOrgIdentity';
    source: SybilDotOrgIdentitySource;
    verified: Scalars['Boolean'];
};
export type SybilDotOrgTwitterIdentity = {
    __typename?: 'SybilDotOrgTwitterIdentity';
    handle?: Maybe<Scalars['String']>;
};
export type SybilDotOrgIdentitySource = {
    __typename?: 'SybilDotOrgIdentitySource';
    twitter: SybilDotOrgTwitterIdentity;
};
export type WorldcoinIdentity = {
    __typename?: 'WorldcoinIdentity';
    isHuman: Scalars['Boolean'];
};
export type OnChainIdentity = {
    __typename?: 'OnChainIdentity';
    ens?: Maybe<EnsOnChainIdentity>;
    proofOfHumanity: Scalars['Boolean'];
    sybilDotOrg: SybilDotOrgIdentity;
    worldcoin: WorldcoinIdentity;
};
export type Erc20 = {
    __typename?: 'Erc20';
    address: Scalars['ContractAddress'];
    decimals: Scalars['Int'];
    name: Scalars['String'];
    symbol: Scalars['String'];
};
export type ModuleFeeAmount = {
    __typename?: 'ModuleFeeAmount';
    asset: Erc20;
    value: Scalars['String'];
};
